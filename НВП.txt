//O(n^2) с восстановлением ответа
    int d[MAXN], p[MAXN]; // константа MAXN равна наибольшему возможному значению n
    
    for (int i=0; i<n; ++i) {
        d[i] = 1;
        p[i] = -1;
        for (int j=0; j<i; ++j)
            if (a[j] < a[i])
                if (1 + d[j] > d[i]) {
                    d[i] = 1 + d[j];
                    p[i] = j;
                }
    }
    
    int ans = d[0],  pos = 0;
    for (int i=0; i<n; ++i)
        if (d[i] > ans) {
            ans = d[i];
            pos = i;
        }
    cout << ans << endl;
    
    vector<int> path;
    while (pos != -1) {
        path.push_back (pos);
        pos = p[pos];
    }
    reverse (path.begin(), path.end());
    for (int i=0; i<(int)path.size(); ++i)
        cout << path[i] << ' ';
    
    //O(nlogn)
    int d[MAXN];
    d[0] = -INF;
    for (int i=1; i<=n; ++i)
        d[i] = INF;
    
    for (int i=0; i<n; i++) {
        int j = int (upper_bound (d.begin(), d.end(), a[i]) - d.begin());
        if (d[j-1] < a[i] && a[i] < d[j])
            d[j] = a[i];
    }